/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef weather_H
#define weather_H

#include <thrift/TDispatchProcessor.h>
#include "weatherCS_types.h"



class weatherIf {
 public:
  virtual ~weatherIf() {}
  virtual void get_weather_info_sorted_list(std::vector<weather_info> & _return, const SortMethod::type method) = 0;
  virtual void get_weather_info(weather_info& _return, const std::string& city_id) = 0;
};

class weatherIfFactory {
 public:
  typedef weatherIf Handler;

  virtual ~weatherIfFactory() {}

  virtual weatherIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(weatherIf* /* handler */) = 0;
};

class weatherIfSingletonFactory : virtual public weatherIfFactory {
 public:
  weatherIfSingletonFactory(const boost::shared_ptr<weatherIf>& iface) : iface_(iface) {}
  virtual ~weatherIfSingletonFactory() {}

  virtual weatherIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(weatherIf* /* handler */) {}

 protected:
  boost::shared_ptr<weatherIf> iface_;
};

class weatherNull : virtual public weatherIf {
 public:
  virtual ~weatherNull() {}
  void get_weather_info_sorted_list(std::vector<weather_info> & /* _return */, const SortMethod::type /* method */) {
    return;
  }
  void get_weather_info(weather_info& /* _return */, const std::string& /* city_id */) {
    return;
  }
};

typedef struct _weather_get_weather_info_sorted_list_args__isset {
  _weather_get_weather_info_sorted_list_args__isset() : method(false) {}
  bool method;
} _weather_get_weather_info_sorted_list_args__isset;

class weather_get_weather_info_sorted_list_args {
 public:

  weather_get_weather_info_sorted_list_args() : method((SortMethod::type)0) {
  }

  virtual ~weather_get_weather_info_sorted_list_args() throw() {}

  SortMethod::type method;

  _weather_get_weather_info_sorted_list_args__isset __isset;

  void __set_method(const SortMethod::type val) {
    method = val;
  }

  bool operator == (const weather_get_weather_info_sorted_list_args & rhs) const
  {
    if (!(method == rhs.method))
      return false;
    return true;
  }
  bool operator != (const weather_get_weather_info_sorted_list_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const weather_get_weather_info_sorted_list_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class weather_get_weather_info_sorted_list_pargs {
 public:


  virtual ~weather_get_weather_info_sorted_list_pargs() throw() {}

  const SortMethod::type* method;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _weather_get_weather_info_sorted_list_result__isset {
  _weather_get_weather_info_sorted_list_result__isset() : success(false) {}
  bool success;
} _weather_get_weather_info_sorted_list_result__isset;

class weather_get_weather_info_sorted_list_result {
 public:

  weather_get_weather_info_sorted_list_result() {
  }

  virtual ~weather_get_weather_info_sorted_list_result() throw() {}

  std::vector<weather_info>  success;

  _weather_get_weather_info_sorted_list_result__isset __isset;

  void __set_success(const std::vector<weather_info> & val) {
    success = val;
  }

  bool operator == (const weather_get_weather_info_sorted_list_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const weather_get_weather_info_sorted_list_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const weather_get_weather_info_sorted_list_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _weather_get_weather_info_sorted_list_presult__isset {
  _weather_get_weather_info_sorted_list_presult__isset() : success(false) {}
  bool success;
} _weather_get_weather_info_sorted_list_presult__isset;

class weather_get_weather_info_sorted_list_presult {
 public:


  virtual ~weather_get_weather_info_sorted_list_presult() throw() {}

  std::vector<weather_info> * success;

  _weather_get_weather_info_sorted_list_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _weather_get_weather_info_args__isset {
  _weather_get_weather_info_args__isset() : city_id(false) {}
  bool city_id;
} _weather_get_weather_info_args__isset;

class weather_get_weather_info_args {
 public:

  weather_get_weather_info_args() : city_id() {
  }

  virtual ~weather_get_weather_info_args() throw() {}

  std::string city_id;

  _weather_get_weather_info_args__isset __isset;

  void __set_city_id(const std::string& val) {
    city_id = val;
  }

  bool operator == (const weather_get_weather_info_args & rhs) const
  {
    if (!(city_id == rhs.city_id))
      return false;
    return true;
  }
  bool operator != (const weather_get_weather_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const weather_get_weather_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class weather_get_weather_info_pargs {
 public:


  virtual ~weather_get_weather_info_pargs() throw() {}

  const std::string* city_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _weather_get_weather_info_result__isset {
  _weather_get_weather_info_result__isset() : success(false) {}
  bool success;
} _weather_get_weather_info_result__isset;

class weather_get_weather_info_result {
 public:

  weather_get_weather_info_result() {
  }

  virtual ~weather_get_weather_info_result() throw() {}

  weather_info success;

  _weather_get_weather_info_result__isset __isset;

  void __set_success(const weather_info& val) {
    success = val;
  }

  bool operator == (const weather_get_weather_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const weather_get_weather_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const weather_get_weather_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _weather_get_weather_info_presult__isset {
  _weather_get_weather_info_presult__isset() : success(false) {}
  bool success;
} _weather_get_weather_info_presult__isset;

class weather_get_weather_info_presult {
 public:


  virtual ~weather_get_weather_info_presult() throw() {}

  weather_info* success;

  _weather_get_weather_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class weatherClient : virtual public weatherIf {
 public:
  weatherClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  weatherClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_weather_info_sorted_list(std::vector<weather_info> & _return, const SortMethod::type method);
  void send_get_weather_info_sorted_list(const SortMethod::type method);
  void recv_get_weather_info_sorted_list(std::vector<weather_info> & _return);
  void get_weather_info(weather_info& _return, const std::string& city_id);
  void send_get_weather_info(const std::string& city_id);
  void recv_get_weather_info(weather_info& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class weatherProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<weatherIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (weatherProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_weather_info_sorted_list(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_weather_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  weatherProcessor(boost::shared_ptr<weatherIf> iface) :
    iface_(iface) {
    processMap_["get_weather_info_sorted_list"] = &weatherProcessor::process_get_weather_info_sorted_list;
    processMap_["get_weather_info"] = &weatherProcessor::process_get_weather_info;
  }

  virtual ~weatherProcessor() {}
};

class weatherProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  weatherProcessorFactory(const ::boost::shared_ptr< weatherIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< weatherIfFactory > handlerFactory_;
};

class weatherMultiface : virtual public weatherIf {
 public:
  weatherMultiface(std::vector<boost::shared_ptr<weatherIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~weatherMultiface() {}
 protected:
  std::vector<boost::shared_ptr<weatherIf> > ifaces_;
  weatherMultiface() {}
  void add(boost::shared_ptr<weatherIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_weather_info_sorted_list(std::vector<weather_info> & _return, const SortMethod::type method) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_weather_info_sorted_list(_return, method);
    }
    ifaces_[i]->get_weather_info_sorted_list(_return, method);
    return;
  }

  void get_weather_info(weather_info& _return, const std::string& city_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_weather_info(_return, city_id);
    }
    ifaces_[i]->get_weather_info(_return, city_id);
    return;
  }

};



#endif
