/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "weatherCS_types.h"

#include <algorithm>



int _kSortMethodValues[] = {
  SortMethod::Up,
  SortMethod::Down
};
const char* _kSortMethodNames[] = {
  "Up",
  "Down"
};
const std::map<int, const char*> _SortMethod_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(2, _kSortMethodValues, _kSortMethodNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

const char* weather_info::ascii_fingerprint = "E9A7EEE9A2D27F7A70E08E1F60A257DB";
const uint8_t weather_info::binary_fingerprint[16] = {0xE9,0xA7,0xEE,0xE9,0xA2,0xD2,0x7F,0x7A,0x70,0xE0,0x8E,0x1F,0x60,0xA2,0x57,0xDB};

uint32_t weather_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->city_id);
          this->__isset.city_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->max_temp);
          this->__isset.max_temp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->min_temp);
          this->__isset.min_temp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t weather_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("weather_info");

  xfer += oprot->writeFieldBegin("city_id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->city_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("max_temp", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->max_temp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("min_temp", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->min_temp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(weather_info &a, weather_info &b) {
  using ::std::swap;
  swap(a.city_id, b.city_id);
  swap(a.name, b.name);
  swap(a.max_temp, b.max_temp);
  swap(a.min_temp, b.min_temp);
  swap(a.__isset, b.__isset);
}


